generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid()) @db.VarChar(255)
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId], map: "accounts_user_id_fkey")
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @db.VarChar(255)
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId], map: "sessions_user_id_fkey")
  @@map("sessions")
}

model User {
  id               String         @id @default(cuid()) @db.VarChar(255)
  name             String?
  email            String?        @unique
  role             String         @default("user")
  image            String?
  authoredComments Comments[]     @relation("AuthoredComments")
  comments         Comments[]     @relation("UserComments")
  likes            Likes[]
  authoredPosts    Posts[]        @relation("AuthoredPosts")
  posts            Posts[]        @relation("UserPosts")
  replies          Replies[]
  accounts         Account[]
  sessions         Session[]

  @@map("users")
}

model Comments {
  id         String    @id @default(cuid()) @db.VarChar(255)
  userId     String    @map("user_id") @db.VarChar(255)
  postId     String    @map("post_id") @db.VarChar(255)
  content    String    @db.Text
  created_at DateTime  @default(now())
  updated_at DateTime  @default(now()) @updatedAt
  authorId   String    @db.VarChar(255)
  author     User      @relation("AuthoredComments", fields: [authorId], references: [id])
  posts      Posts     @relation("PostComments", fields: [postId], references: [id], onDelete: Cascade)
  user       User      @relation("UserComments", fields: [userId], references: [id])
  replies    Replies[]

  @@index([postId], map: "postId_Comments")
  @@index([userId], map: "userId_Comments")
  @@index([authorId], map: "Comments_authorId_fkey")
}


model Likes {
  userId String @map("user_id") @db.VarChar(255)
  postId String @map("post_id") @db.VarChar(255)
  posts  Posts  @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id])

  @@id([userId, postId])
  @@index([postId], map: "Likes_post_id_fkey")
}


model Posts {
  id         String     @id @default(cuid()) @db.VarChar(255)
  userId     String     @map("user_id") @db.VarChar(255)
  content    String     @db.Text
  image_url  String?    @db.VarChar(255)
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now()) @updatedAt
  authorId   String     @db.VarChar(255)
  comments   Comments[] @relation("PostComments")
  likes      Likes[]
  author     User       @relation("AuthoredPosts", fields: [authorId], references: [id])
  user       User       @relation("UserPosts", fields: [userId], references: [id])

  @@index([userId], map: "userId_Posts")
  @@index([authorId], map: "Posts_authorId_fkey")
}



model Replies {
  id         String   @id @default(cuid()) @db.VarChar(255)
  userId     String   @map("user_id") @db.VarChar(255)
  commentId  String   @map("comment_id") @db.VarChar(255)
  content    String   @db.Text
  created_at DateTime @default(now())
  comments   Comments @relation(fields: [commentId], references: [id])
  user       User     @relation(fields: [userId], references: [id])

  @@index([commentId], map: "commentId_Replies")
  @@index([userId], map: "userId_Replies")
}

