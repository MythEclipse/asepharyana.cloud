datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                 String  @id @default(cuid()) @db.VarChar(255)
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid()) @db.VarChar(255)
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid()) @db.VarChar(255)
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  role          String    @default("user")
  image         String?
  accounts      Account[]
  sessions      Session[]
  comments         Comments[]     @relation("UserComments")
  likes            Likes[]
  posts            Posts[]        @relation("UserPosts")
  replies          Replies[]
  subscription     Subscription[]
  authoredPosts    Posts[]        @relation("AuthoredPosts")
  authoredComments Comments[]     @relation("AuthoredComments")

  @@map("users")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Comments {
  id         String    @id @default(cuid()) @db.VarChar(255)
  userId     String    @map("user_id") @db.VarChar(255)
  postId     String    @map("post_id") @db.VarChar(255)
  content    String    @db.Text
  created_at DateTime  @default(now())
  authorId   String    @db.VarChar(255)  // Field untuk relasi dengan User
  user       User      @relation("UserComments", fields: [userId], references: [id])
  posts      Posts     @relation("PostComments", fields: [postId], references: [id])
  author     User      @relation("AuthoredComments", fields: [authorId], references: [id])
  replies    Replies[]

  @@index([postId], map: "postId_Comments")
  @@index([userId], map: "userId_Comments")
}

model Likes {
  userId String @map("user_id") @db.VarChar(255)
  postId String @map("post_id") @db.VarChar(255)
  user   User   @relation(fields: [userId], references: [id])
  posts  Posts  @relation(fields: [postId], references: [id])

  @@id([userId, postId])
}

model Posts {
  id         String     @id @default(cuid()) @db.VarChar(255)
  userId     String     @map("user_id") @db.VarChar(255)
  content    String     @db.Text
  image_url  String?    @db.VarChar(255)
  created_at DateTime   @default(now())
  updated_at DateTime   @default(now())
  authorId   String     @db.VarChar(255)  // Field untuk relasi dengan User
  user       User       @relation("UserPosts", fields: [userId], references: [id])
  author     User       @relation("AuthoredPosts", fields: [authorId], references: [id])
  comments   Comments[] @relation("PostComments")
  likes      Likes[]

  @@index([userId], map: "userId_Posts")
}

model Replies {
  id         String   @id @default(cuid()) @db.VarChar(255)
  userId     String   @map("user_id") @db.VarChar(255)
  commentId  String   @map("comment_id") @db.VarChar(255)
  content    String   @db.Text
  created_at DateTime @default(now())
  user       User     @relation(fields: [userId], references: [id])
  comments   Comments @relation(fields: [commentId], references: [id])

  @@index([commentId], map: "commentId_Replies")
  @@index([userId], map: "userId_Replies")
}

model Subscription {
  user    User   @relation(fields: [userId], references: [id])
  userId  String @db.VarChar(255)
  topicId String @db.VarChar(255)

  @@id([userId, topicId])
}

model Feedback {
  email     String   @unique
  id        String   @id @default(uuid())
  name      String
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
